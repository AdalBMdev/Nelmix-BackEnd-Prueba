<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nelmix</name>
    </assembly>
    <members>
        <member name="M:Nelmix.Controllers.BankAccountController.CreateBankAccount(Nelmix.DTO.BankAccountDTO.CreateBankAccountRequestDto)">
            <summary>
            Crea una nueva cuenta bancaria para un usuario.
            </summary>
            <param name="createBankAccount">DTO que contiene la información para la creación de la cuenta bancaria.</param>
            <returns>Un ActionResult que indica si la cuenta bancaria se creó con éxito.</returns>
        </member>
        <member name="M:Nelmix.Controllers.BankAccountController.DeleteBankAccount(System.Int32,System.Int32)">
            <summary>
            Elimina una cuenta bancaria de un usuario.
            </summary>
            <param name="cuentaId">Identificador de la cuenta bancaria Ejemplo: 1.</param>
            <param name="userId">Identificador del usuario. Ejemplo: 1</param>
            <returns>Un ActionResult que indica si la cuenta bancaria se eliminó con éxito.</returns>
        </member>
        <member name="M:Nelmix.Controllers.BankAccountController.AddBankAccountBalance(System.Int32,System.Int32,System.Decimal)">
            <summary>
            Añade saldo a una cuenta bancaria.
            </summary>
            <param name="userId">Identificador del usuario. Ejemplo: 1</param>
            <param name="currencyId">Identificador de la moneda. Ejemplo: 2</param>
            <param name="balance">Saldo a añadir a la cuenta. Ejemplo: 50000</param>
            <returns>Un ActionResult que indica si el saldo se añadió con éxito a la cuenta bancaria.</returns>
        </member>
        <member name="M:Nelmix.Controllers.CurrenciesController.ConvertCurrencyDollars(System.Int32)">
            <summary>
            Convierte la moneda de una cuenta a dólares.
            </summary>
            <param name="accountId">Identificador de la cuenta de banco. Ejemplo: 1</param>
            <returns>Un ActionResult que indica si la conversión a dólares se realizó con éxito. </returns>
        </member>
        <member name="M:Nelmix.Controllers.CurrenciesController.BuyChipsInDollars(System.Int32,System.Int32,System.Int32)">
            <summary>
            Compra fichas solo en dólares.
            </summary>
            <param name="userId">Identificador del usuario. Ejemplo: 1</param>
            <param name="typeFileId">Identificador del tipo de ficha. Ejemplo: 1</param>
            <param name="quantity">Cantidad de fichas a comprar. Ejemplo: 10</param>
            <returns>Un ActionResult que indica si la compra de fichas en dólares se realizó con éxito.</returns>
        </member>
        <member name="M:Nelmix.Controllers.CurrenciesController.ExchangeChipsToCurrency(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Realiza el intercambio de fichas por una moneda específica menos dolares.
            </summary>
            <param name="userId">Identificador del usuario. Ejemplo: 1</param>
            <param name="typeFileId">Identificador del tipo de ficha. Ejemplo: 1</param>
            <param name="currencyDestinationId">Id de la moneda de destino para el intercambio. Ejemplo: 2</param>
            <param name="quantityFichas">Cantidad de fichas a intercambiar. Ejemplo: 10</param>
            <returns>Un ActionResult que indica si el intercambio de fichas a moneda se realizó con éxito.</returns>
        </member>
        <member name="M:Nelmix.Controllers.FinanceController.GetFinancialStatement(System.Int32)">
            <summary>
            Obtiene el estado financiero de un usuario, incluyendo saldo actual, ganancias, pérdidas y fichas.
            </summary>
            <param name="userId">Identificador del usuario. Ejemplo: 1</param>
            <returns>Un ActionResult que contiene el estado financiero del usuario. </returns>
        </member>
        <member name="M:Nelmix.Controllers.FinanceController.ObtenerGananciasYPérdidasPorJuego(System.Int32)">
            <summary>
            Obtiene las ganancias y pérdidas por juego de un usuario.
            </summary>
            <param name="userId">Identificador del usuario. Ejemplo: 1</param>
            <returns>Un ActionResult que contiene una lista de ganancias y pérdidas por juego.</returns>
        </member>
        <member name="M:Nelmix.Controllers.GameController.PlayCraps(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Permite a un usuario jugar a Craps.
            </summary>
            <param name="userId">Identificador del usuario. Ejemplo: 1</param>
            <param name="redChips">Cantidad de fichas rojas apostadas. Ejemplo: 10</param>
            <param name="yellowChips">Cantidad de fichas amarillas apostadas. Ejemplo: 0</param>
            <param name="greenChips">Cantidad de fichas verdes apostadas. Ejemplo: 0</param>
            <param name="blackChips">Cantidad de fichas negras apostadas. Ejemplo: 0</param>
            <returns>Un ActionResult que indica el resultado del juego.</returns>
        </member>
        <member name="M:Nelmix.Controllers.GameController.PlayTragaperras(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Permite a un usuario jugar a Tragaperras.
            </summary>
            <param name="userId">Identificador del usuario. Ejemplo: 1</param>
            <param name="redChips">Cantidad de fichas rojas apostadas. Ejemplo: 10</param>
            <param name="yellowChips">Cantidad de fichas amarillas apostadas. Ejemplo: 0</param>
            <param name="greenChips">Cantidad de fichas verdes apostadas. Ejemplo: 0</param>
            <param name="blackChips">Cantidad de fichas negras apostadas. Ejemplo: 0</param>
            <returns>Un ActionResult que indica el resultado del juego.</returns>
        </member>
        <member name="M:Nelmix.Controllers.GameController.PlayBlackjack(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Permite a un usuario jugar a Blackjack.
            </summary>
            <param name="userId">Identificador del usuario. Ejemplo: 1</param>
            <param name="redChips">Cantidad de fichas rojas apostadas. Ejemplo: 10</param>
            <param name="yellowChips">Cantidad de fichas amarillas apostadas. Ejemplo: 0</param>
            <param name="greenChips">Cantidad de fichas verdes apostadas. Ejemplo: 0</param>
            <param name="blackChips">Cantidad de fichas negras apostadas. Ejemplo: 0</param>
            <returns>Un ActionResult que indica el resultado del juego.</returns>
        </member>
        <member name="M:Nelmix.Controllers.UserController.RegisterAsync(Nelmix.Models.Usuario)">
            <summary>
            Registra un nuevo usuario.
            </summary>
            <param name="oUsuario">Objeto de tipo Usuario que contiene los datos del usuario a registrar.</param>
            <returns>Un ActionResult que indica el resultado de la operación.</returns>
        </member>
        <member name="M:Nelmix.Controllers.UserController.Login(System.String,System.String)">
            <summary>
            Inicia sesión de un usuario.
            </summary>
            <param name="email">Correo electrónico del usuario. Ejemplo: john@gmail.com</param>
            <param name="password">Contraseña del usuario. Ejemplo: 123</param>
            <returns>Un ActionResult que indica el resultado de la operación.</returns>
        </member>
        <member name="M:Nelmix.Controllers.UserController.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Cambia la contraseña de un usuario.
            </summary>
            <param name="email">Correo electrónico del usuario. Ejemplo: john@gmail.com</param>
            <param name="password">Contraseña del usuario. Ejemplo: 123</param>
            <param name="newPassword">Nueva contraseña para el usuario. Ejemplo: 1234</param>
            <returns>Un ActionResult que indica el resultado de la operación.</returns>
        </member>
        <member name="M:Nelmix.Controllers.UserController.AsignarAdultoResponsable(System.String,System.String)">
            <summary>
            Asigna un adulto responsable a un usuario menor.
            </summary>
            <param name="mailUserMinor">Correo electrónico del usuario menor.  Ejemplo: userMinor@gmail.com</param>
            <param name="mailUserAdult">Correo electrónico del adulto responsable.  Ejemplo: userAdult@gmail.com</param>
            <returns>Un ActionResult que indica el resultado de la operación.</returns>
        </member>
        <member name="M:Nelmix.Controllers.UserController.DesactivateUser(System.Int32)">
            <summary>
            Desactiva un usuario.
            </summary>
            <param name="userId">Identificador del usuario a desactivar. Ejemplo: 1</param>
            <returns>Un ActionResult que indica el resultado de la operación.</returns>
        </member>
        <member name="M:Nelmix.Services.BankAccountService.CreateBankAccount(Nelmix.DTO.BankAccountDTO.CreateBankAccountRequestDto)">
            <summary>
            Crea una nueva cuenta bancaria para un usuario con un saldo inicial y una moneda específica.
            </summary>
            <param name="createBankAccount">DTO que contiene la información para la creación de la cuenta bancaria.</param>
            <returns>True si la cuenta bancaria se crea con éxito, de lo contrario, False.</returns>
        </member>
        <member name="M:Nelmix.Services.BankAccountService.DeleteBankAccount(System.Int32,System.Int32)">
            <summary>
            Elimina una cuenta bancaria de un usuario.
            </summary>
            <param name="cuentaId">Identificador de la cuenta bancaria.</param>
            <param name="userId">Identificador del usuario.</param>
            <returns>True si la cuenta bancaria se elimina con éxito, de lo contrario, False.</returns>
        </member>
        <member name="M:Nelmix.Services.BankAccountService.AddBankAccountBalance(System.Int32,System.Int32,System.Decimal)">
            <summary>
            Agrega saldo a una cuenta bancaria de un usuario en una moneda específica.
            </summary>
            <param name="userId">Identificador del usuario.</param>
            <param name="currencyId">Identificador de la moneda.</param>
            <param name="balance">Saldo a agregar a la cuenta bancaria.</param>
            <returns>True si se agrega saldo con éxito, de lo contrario, False.</returns>
        </member>
        <member name="M:Nelmix.Services.CurrenciesService.ConvertCurrencyDollars(System.Int32)">
            <summary>
            Convierte el saldo de una cuenta a dólares.
            </summary>
            <param name="accountId">Identificador de la cuenta.</param>
            <returns>El saldo convertido a dólares.</returns>
        </member>
        <member name="M:Nelmix.Services.CurrenciesService.BuyChipsInDollars(System.Int32,System.Int32,System.Int32)">
            <summary>
            Compra fichas en dólares para un usuario.
            </summary>
            <param name="userId">Identificador del usuario.</param>
            <param name="typeFileId">Identificador del tipo de ficha.</param>
            <param name="quantity">Cantidad de fichas a comprar.</param>
            <returns>Un mensaje indicando si la compra de fichas fue exitosa o un mensaje de error.</returns>
        </member>
        <member name="M:Nelmix.Services.CurrenciesService.ExchangeChipsToCurrency(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Intercambia fichas por una moneda específica para un usuario.
            </summary>
            <param name="userId">Identificador del usuario.</param>
            <param name="typeFileId">Identificador del tipo de ficha.</param>
            <param name="currencyDestinationId">Moneda de destino para la conversión.</param>
            <param name="quantityFichas">Cantidad de fichas a convertir.</param>
            <returns>Un mensaje indicando si la conversión de fichas fue exitosa o un mensaje de error.</returns>
        </member>
        <member name="M:Nelmix.Services.FinanceService.GetFinancialStatusUser(System.Int32)">
            <summary>
            Obtiene el estado financiero de un usuario, incluyendo su saldo actual, ganancias, pérdidas y cantidad de fichas.
            </summary>
            <param name="userId">Identificador del usuario.</param>
            <returns>True si se obtiene el estado financiero con éxito, de lo contrario, False.</returns>
        </member>
        <member name="M:Nelmix.Services.FinanceService.GetProfitAndLossFromGaming(System.Int32)">
            <summary>
            Obtiene las ganancias y pérdidas por juego para un usuario específico.
            </summary>
            <param name="userId">Identificador del usuario.</param>
            <returns>Una lista de objetos de tipo GananciasYPérdidasPorJuego que contiene información sobre ganancias y pérdidas por juego.</returns>
        </member>
        <member name="M:Nelmix.Services.GameService.VerifyEligibilityToPlay(System.Int32)">
            <summary>
            Verifica si un usuario es elegible para jugar.
            </summary>
            <param name="userId">Identificador del usuario.</param>
        </member>
        <member name="M:Nelmix.Services.GameService.VerifyAvailabilityFiches(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Verifica si un usuario tiene suficientes fichas disponibles para jugar.
            </summary>
            <param name="userId">Identificador del usuario.</param>
            <param name="redChips">Cantidad de fichas rojas.</param>
            <param name="yellowChips">Cantidad de fichas amarillas.</param>
            <param name="greenChips">Cantidad de fichas verdes.</param>
            <param name="blackChips">Cantidad de fichas negras.</param>
            <returns>True si el usuario tiene suficientes fichas, de lo contrario, False.</returns>
        </member>
        <member name="M:Nelmix.Services.GameService.VerifyLoseLimit(System.Int32,System.Int32)">
            <summary>
            Verifica si un usuario ha excedido el límite de pérdida en un juego específico.
            </summary>
            <param name="userId">Identificador del usuario.</param>
            <param name="juegoId">Identificador del juego.</param>
            <returns>True si el usuario ha excedido el límite de pérdida, de lo contrario, False.</returns>
        </member>
        <member name="M:Nelmix.Services.GameService.VerifyGainLimit(System.Int32)">
            <summary>
            Verifica si un usuario ha excedido el límite de ganancia en un juego específico.
            </summary>
            <param name="userId">Identificador del usuario.</param>
            <returns>True si el usuario ha excedido el límite de ganancia, de lo contrario, False.</returns>
        </member>
        <member name="M:Nelmix.Services.GameService.ManageUserGame(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Gestiona el juego de un usuario, actualizando las fichas y el estado de victoria en la base de datos.
            </summary>
            <param name="userId">Identificador del usuario.</param>
            <param name="redChips">Cantidad de fichas rojas.</param>
            <param name="yellowChips">Cantidad de fichas amarillas.</param>
            <param name="greenChips">Cantidad de fichas verdes.</param>
            <param name="blackChips">Cantidad de fichas negras.</param>
            <param name="victory">Indica si el usuario ha ganado el juego.</param>
            <param name="gameId">Identificador del juego.</param>
            <returns>True si la gestión del juego se realiza con éxito, de lo contrario, False.</returns>
        </member>
        <member name="M:Nelmix.Services.GameService.VerifyPlay(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Verifica si un usuario cumple con los requisitos para jugar, incluyendo elegibilidad, disponibilidad de fichas y límites de ganancia y pérdida.
            </summary>
            <param name="usuarioId">Identificador del usuario.</param>
            <param name="redChips">Cantidad de fichas rojas.</param>
            <param name="yellowChips">Cantidad de fichas amarillas.</param>
            <param name="greenChips">Cantidad de fichas verdes.</param>
            <param name="blackChips">Cantidad de fichas negras.</param>
            <param name="juegoId">Identificador del juego.</param>
            <returns>True si el usuario cumple con los requisitos para jugar, de lo contrario, False.</returns>
        </member>
        <member name="M:Nelmix.Services.GameService.PlayCraps">
            <summary>
            Simula un juego de Craps. Lanza dos dados y calcula la suma de los valores.
            Determina si el jugador ganó o perdió según las reglas del juego.
            </summary>
            <returns>
            Un valor booleano que indica si el jugador ganó (true), perdió (false) o si el resultado aún no se ha determinado (null).
            Un mensaje descriptivo del resultado del juego.
            </returns>
        </member>
        <member name="M:Nelmix.Services.GameService.PlayTragaperras">
            <summary>
            Simula un juego de tragaperras con tres símbolos. Genera aleatoriamente tres símbolos y determina si el jugador ha ganado si los tres símbolos son iguales.
            </summary>
            <returns>
            Un valor booleano que indica si el jugador ganó (true) o perdió (false).
            Un mensaje descriptivo del resultado del juego, incluyendo los símbolos obtenidos.
            </returns>
        </member>
        <member name="M:Nelmix.Services.GameService.PlayBlackjack">
            <summary>
            Simula un juego de Blackjack. Genera dos cartas aleatorias y calcula la suma de sus valores.
            Determina si el jugador ganó si la suma es igual a 21.
            </summary>
            <returns>
            Un valor booleano que indica si el jugador ganó (true) o perdió (false).
            Un mensaje descriptivo del resultado del juego, incluyendo la suma de cartas obtenida.
            </returns>
        </member>
        <member name="M:Nelmix.Services.UserService.RegisterUser(Nelmix.Models.Usuario)">
            <summary>
            Registra un nuevo usuario en la base de datos.
            </summary>
            <param name="usuario">Objeto Usuario que contiene los datos del usuario a registrar.</param>
            <returns>True si el registro fue exitoso, de lo contrario, False.</returns>
        </member>
        <member name="M:Nelmix.Services.UserService.Login(System.String,System.String)">
            <summary>
            Inicia sesión de un usuario utilizando su correo electrónico y contraseña.
            </summary>
            <param name="email">Correo electrónico del usuario.</param>
            <param name="password">Contraseña del usuario.</param>
            <returns>True si la sesión se inicia con éxito, de lo contrario, False.</returns>
        </member>
        <member name="M:Nelmix.Services.UserService.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Cambia la contraseña de un usuario.
            </summary>
            <param name="email">Correo electrónico del usuario.</param>
            <param name="password">Contraseña actual del usuario.</param>
            <param name="newPassword">Nueva contraseña que se asignará al usuario.</param>
            <returns>True si la contraseña se cambia con éxito, de lo contrario, False.</returns>
        </member>
        <member name="M:Nelmix.Services.UserService.AssignAdultResponsible(System.String,System.String)">
            <summary>
            Asigna un adulto responsable a un usuario menor.
            </summary>
            <param name="mailUserMinor">Correo electrónico del usuario menor.</param>
            <param name="mailUserAdult">Correo electrónico del adulto responsable.</param>
            <returns>Una tupla que contiene un valor booleano (True si la asignación fue exitosa) y un mensaje de texto.</returns>
        </member>
        <member name="M:Nelmix.Services.UserService.ChangeUserStatusInactiveAsync(System.Int32)">
            <summary>
            Cambia el estado de un usuario a inactivo.
            </summary>
            <param name="userId">Identificador del usuario.</param>
        </member>
        <member name="M:Nelmix.Services.UserService.ConvertSha256(System.String)">
            <summary>
            Convierte una cadena en un valor hash SHA-256.
            </summary>
            <param name="inputString">Cadena de entrada que se convertirá en hash.</param>
            <returns>El hash SHA-256 de la cadena de entrada.</returns>
        </member>
    </members>
</doc>
